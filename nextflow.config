/*
* This configuration file is the default one used by the pipeline
*/

params {

    // Max resource options, defaults only, expecting to be overwritten
    max_memory      = 10.GB       
    max_cpus        = 4    
    max_time        = '48.h'         
    gatk_memory     = 10        // should be same as max_memory  
    max_threads     = 8         // should be max_cpus * 2          
}

profiles {
	conda {
		conda.enabled = true
        docker.enabled = false
        apptainer.enabled = false
        process.conda = "./envs/env.yml"
	}
	mamba {
		conda.enabled       = true
		conda.useMamba      = true
        docker.enabled      = false
        apptainer.enabled   = false
	}
    docker {
        conda.enabled           = false
        docker.enabled          = true
        docker.userEmulation    = true
        apptainer.enabled       = false
        process.container       = "finterly/nf-wgs-dsl2:latest"
    }
    apptainer {
        conda.enabled           = false
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        docker.enabled          = false
        process.container       = 'file://nf-wgs-dsl2.sif'
    }
    sge {
        process {
            executor        = "sge"
            scratch         = true
            stageInMode     = "copy"
            stageOutMode    = "move"
            errorStrategy   = "retry"
	        clusterOptions = '-S /bin/bash -o job.log -e job.err'
        }
        executor {
	        queueSize = 1000
        }
    } 

}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// keep trace
trace {
	enabled = true
	file = "${params.outdir}/trace.txt"
    overwrite = true
}

// keep report
report {
	enabled = true
	file = "${params.outdir}/report.html"
    overwrite = true
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
